name: Auto Merge Approved PR

on:
  pull_request_review:
    types: [submitted]
  pull_request:
    types: [synchronize]
  check_run:
    types: [completed]
  status: {}
  workflow_run:
    workflows: ["CI"]
    types: [completed]

jobs:
  auto-merge:
    # 以下のいずれかの条件で実行:
    # 1. レビューがsubmittedされた
    # 2. PRが更新された (synchronize)
    # 3. チェックランが完了した
    # 4. ステータスが更新された
    # 5. CIワークフローが完了した (workflow_run)
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate Claude AI App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.CLAUDE_APP_ID }}
          private-key: ${{ secrets.CLAUDE_APP_PRIVATE_KEY }}
          
      - name: Check if PR is approved and ready
        id: check-status
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            let prNumber;
            let pr;
            
            // イベントの種類に応じてPR番号を取得
            if (context.payload.pull_request) {
              // pull_request_review, pull_request イベント
              prNumber = context.payload.pull_request.number;
            } else if (context.payload.check_run && context.payload.check_run.pull_requests.length > 0) {
              // check_run イベント
              prNumber = context.payload.check_run.pull_requests[0].number;
            } else if (context.eventName === 'status') {
              // status イベント - SHAからPRを検索
              const { data: prs } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                head: `${context.repo.owner}:${context.payload.sha}`
              });
              
              if (prs.length === 0) {
                console.log('No open PRs found for this commit');
                return { shouldMerge: false };
              }
              
              prNumber = prs[0].number;
            } else if (context.eventName === 'workflow_run' && context.payload.workflow_run) {
              // workflow_run イベント - CI完了時
              const workflowRun = context.payload.workflow_run;
              
              // Pull requestからSHAに基づいてPRを検索
              const { data: prs } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open'
              });
              
              const matchedPR = prs.find(pr => pr.head.sha === workflowRun.head_sha);
              
              if (!matchedPR) {
                console.log(`No open PR found for workflow run SHA: ${workflowRun.head_sha}`);
                return { shouldMerge: false };
              }
              
              prNumber = matchedPR.number;
              console.log(`Found PR #${prNumber} for workflow run: ${workflowRun.name}`);
            } else {
              console.log('Could not determine PR number from event');
              return { shouldMerge: false };
            }
            
            console.log(`Processing PR #${prNumber}`);
            
            const { data: prData } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            pr = prData;
            
            // Claude AI Botが作成したPRのみ対象
            if (pr.user.login !== 'claude-ai-assistant-for-hilltop[bot]') {
              console.log('PR not created by Claude AI Bot, skipping');
              return { shouldMerge: false };
            }
            
            // レビューを取得
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            // 最新のレビューをユーザーごとに取得
            const latestReviews = {};
            reviews.forEach(review => {
              latestReviews[review.user.login] = review;
            });
            
            // オーナー（あなた）のApprovalを確認
            const ownerReview = latestReviews['${{ github.repository_owner }}'];
            const isApproved = ownerReview && ownerReview.state === 'APPROVED';
            
            // ステータスチェックを確認（check runs と status checks の両方）
            const { data: checks } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha
            });
            
            const { data: statuses } = await github.rest.repos.getCombinedStatusForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha
            });
            
            // 自分自身（auto-merge workflow）は除外
            const relevantChecks = checks.check_runs.filter(check => 
              check.name !== 'auto-merge'
            );
            
            const checksPassed = relevantChecks.length === 0 || relevantChecks.every(check => 
              check.status === 'completed' && check.conclusion === 'success'
            );
            
            // 実行中のチェックがあるかどうかを確認
            const hasRunningChecks = relevantChecks.some(check => 
              check.status !== 'completed' || check.conclusion === null
            );
            
            const statusesPassed = statuses.state === 'success' || 
              statuses.statuses.length === 0 || 
              statuses.statuses.every(status => status.state === 'success');
            
            const allChecksPassed = checksPassed && statusesPassed;
            
            console.log(`Check runs (${relevantChecks.length}):`, relevantChecks.map(c => `${c.name}: ${c.status}/${c.conclusion}`));
            console.log(`Status checks (${statuses.statuses.length}):`, statuses.statuses.map(s => `${s.context}: ${s.state}`));
            console.log(`Combined status: ${statuses.state}`);
            console.log(`Has running checks: ${hasRunningChecks}`);
            
            console.log(`PR #${pr.number}:`);
            console.log(`- Created by: ${pr.user.login}`);
            console.log(`- Owner approved: ${isApproved}`);
            console.log(`- All checks passed: ${allChecksPassed}`);
            console.log(`- Has running checks: ${hasRunningChecks}`);
            console.log(`- Mergeable: ${pr.mergeable}`);
            
            // 実行中のチェックがある場合は、マージしない（後で再実行される）
            if (hasRunningChecks) {
              console.log('⏳ Checks are still running, will retry when they complete');
              return { shouldMerge: false };
            }
            
            const shouldMerge = isApproved && allChecksPassed && pr.mergeable;
            
            return {
              shouldMerge,
              prNumber: pr.number,
              headRef: pr.head.ref,
              baseRef: pr.base.ref
            };
      
      - name: Auto merge PR
        if: fromJSON(steps.check-status.outputs.result).shouldMerge
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const result = ${{ steps.check-status.outputs.result }};
            
            try {
              // PRをマージ
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: result.prNumber,
                commit_title: `Auto-merge PR #${result.prNumber}`,
                commit_message: 'Automatically merged by GitHub Actions after approval\n\n🤖 Generated with [Claude Code](https://claude.ai/code)',
                merge_method: 'squash'
              });
              
              console.log(`✅ Successfully merged PR #${result.prNumber}`);
              
              // ブランチを削除（少し待ってから）
              await new Promise(resolve => setTimeout(resolve, 2000));
              
              try {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/${result.headRef}`
                });
                console.log(`✅ Successfully deleted branch: ${result.headRef}`);
              } catch (deleteError) {
                console.log(`⚠️ Failed to delete branch: ${deleteError.message}`);
              }
              
            } catch (error) {
              console.error(`❌ Failed to merge PR: ${error.message}`);
              throw error;
            }
      
      - name: Post merge comment
        if: fromJSON(steps.check-status.outputs.result).shouldMerge
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const result = ${{ steps.check-status.outputs.result }};
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: result.prNumber,
              body: '🎉 PRが自動的にマージされ、ブランチが削除されました！\n\n✅ Approved by repository owner\n✅ All checks passed\n✅ Auto-merged and branch deleted\n\n🤖 Automated by GitHub Actions'
            });